"""
Fire Emblem Echoes: Shadows of Valentia Characters Editor by fantoski. 

Credits:

 - Me ( reddit.com/user/fantoski ): Being awesome.
       Modifying hexdumper.
       All the Characters data not already provided by Koko Kun. 
       Coding the whole shit altogether except for hexdumper obv.     

 - burdturgler1154 ( reddit.com/user/burdturgler1154 ): Helping me, being so fucken cool. 
    
 - Jfs ( stackoverflow.com/users/4279/jfs ): Python hexdumper.

 - Koko Kun ( gbatemp.net/members/koko-kun.392886 ): Amiibos + Deen datas, 
   tutorial on how to edit characters. 


 - StahlWorks Technologies: Swiss File Knife ( Convertion tool )

 - Dutchman ( 
   kibernetik.pro/forum/viewtopic.php?f=20&t=1938&sid=c81ed9bcdd99c939662f293ddcbd660a ):
   Swiss File Knife guide to Bin -> Hex convertion ( Although unused in this version ). 
   
 - Unknown Person ( Website was down but its google result had the solution, here is the
   link that was down at the time and possibly still is: 
   http://www.portablefreeware.com/forums/viewtopic.php?p=28022 ): Swiss File Knife full
   command for Hex -> Bin convertion. 
"""
Characters = [
["Celica","150100C7D28D28D9CA220727FCDBEA4553E363006F38D80D000000000000000078FFFFFFFF000100000000FF000000FF00000000010275E2BA8F750EA433009E2506763EF0F2EA0002010D00000011D2EB9D4B4183D502000000040200000000FA6CEC7FAEF96C7C456ECD8CF10000000200000000030000000000000000000000000000000000"],
["Alm","150100CDE7C2253782C20592F226DE6E78A15D0011EC5674000000000000000080FFFFFFFF000100000000FF000000FF000000000100020002000000030100000000FA6CEC7FAEF96C7C17FBB58CF10000000200000000030000000000000000000000000000000000"],
["Silque","15010060741B289A70EA0669705A3B5F5180C600A50E8539000000000000000076FFFFFFFF00000000000055000016FF000000000100020002000000030100000000FA6CEC7FAEF96C7C0EDCBD8CF10000000200000000030000000000000000000000000017000000"],
["Tatiana","150100867D31856A31A019F903575FEB1ECE95003FEED045000000000000000080FFFFFFFF0000000000005D000000FF000000000100020002000000030100000000FA6CEC7FAEF96C7CF1FE4E8EF10000000200000000030000000000000000000000000004000000"],
["Genny","150100F071A328AC72423569705A3B5F5180C60089B59376000000000000000076FFFFFFFF000100000000FF000000FF0000000001000201C6000000AD518869ADBB76FE02000000040200000000FA6CEC7FAEF96C7CF5F2CD8CF10000000200000000030000000000000000000000000000000000"],
["Faye","150100365C7326A87A1A06831A98DC2786885C002B16E403000000000000000077FFFFFFFF000100000000FF000000FF0000000001000201B6000000B471B4F0EE748F1002000000030100000000FA6CEC7FAEF96C7CAF7CB68CF10000000200000000030000000000000000000000000000000000"],
["Est","1503009FC67226B1111A069C62D71350DE579C00A301B910000000000000000078FFFFFFFF0000000000006C000042FF000000000100020002000000040200000000FA6CEC7FAEF96C7C3E07298DF10000000200000000030000000000000000000000000008000000"],
["Catria","1503009FC67226B1111A069C62D71350DE579C00A301B910000000000000000078FFFFFFFF0000000000006C000042FF000000000100020002000000040200000000FA6CEC7FAEF96C7C3E07298DF10000000200000000030000000000000000000000000008000000"],
["Palla","15080023F4062B2D9C5B089C62D71350DE579C00DA45DA1A000000000000000080FFFFFFFF0000000000006800003EFF000000000100020002000000040200000000FA6CEC7FAEF96C7C71561D8DF1000000020000000003000000000000000000000000000E000000"],
["Clair","15010024B2362746B879069C62D71350DE579C001AAC7209000000000000000078FFFFFFFF000100000000FF000000FF000000000100020002000000030100000000FA6CEC7FAEF96C7CAAD11D93F10000000200000000030000000000000000000000000000000000"],
["Gray","150500174B5327C9CF8706C51B98DC5787885C00C71FD24D00000000000000007CFFFFFFFF000100000000FF000000FF000000000100020002000000030100000000FA6CEC7FAEF96C7CAF63B68CF10000000200000000030000000000000000000000000000000000"],
["Mae","15010086B994FD52700E059B0DAFB1133ECFCC0015952A35000000000000000078FFFFFFFF000100000000FF000000FF0000000001000201C800000049C7276B9B6DA1CB02000000040200000000FA6CEC7FAEF96C7C6EDCCD8CF10000000200000000030000000000000000000000000000000000"],
["Leon","1504005FF494FDA3990E05E3E9012321FF7726002EBCB23800000000000000007BFFFFFFFF00000000000066000048FF0000000001012EDA102B2AAE1605000201260000004CD48FE2F61C0C7402000000040200000000FA6CEC7FAEF96C7CE6FD0D8DF10000000200000000030000000000000000000000000014000000"],
["Boey","150100C05B402C46FAF508DD0EAFB1433FCFCC0068A7BD3E00000000000000007AFFFFFFFF000100000000FF000000FF0000000001000201B000000016430BAB3CCA525C02000000040200000000FA6CEC7FAEF96C7C6FDCCD8CF10000000200000000030000000000000000000000000000000000"],
["Luthier","150700AF47959C9B2644CEDD0EAFB1433FCFCC0094DE0111000000000000000080FFFFFFFF0000000000005A00001DFF0000000001000201C4000000C88EB619042B7EDB02000000030100000000FA6CEC7FAEF96C7CBF31348DF1000000020000000003000000000000000000000000000F000000"],
["Kamui","150300360EC426382D41065A40290862B104700098E8D23B00000000000000007CFFFFFFFF00000000000065000046FF000000000100020002000000040200000000FA6CEC7FAEF96C7C5CF10D8DF10000000200000000030000000000000000000000000014000000"],
["Valbar","1501001664E62A60BC4A08A612F3C21E68886D003C65AA18000000000000000082FFFFFFFF00000000000064000000FF000000000100020002000000040200000000FA6CEC7FAEF96C7C06E50D8DF10000000200000000030000000000000000000000000014000000"],
["Conrad","1507000544223A1727BCFF89A60099B78ACB0C0073106846000000000000000084FFFFFFFF0000000000006E00002DFF00000000010002011A000000301F6C44A4E0169702000000040200000000FA6CEC7FAEF96C7CD2B1398EF10000000200000000030000000000000000000000000002000000"],
["Tobin","150200BB31AC11BD5EDDFBC51B98DC5787885C005C4C114000000000000000007AFFFFFFFF000100000000FF000000FF0000000001000201BA0000002AC1886654236B3902000000030100000000FA6CEC7FAEF96C7CAF63B68CF10000000200000000030000000000000000000000000000000000"],
["Python","150300624F88176AC0935FE3E9012321FF77260071FACB7500000000000000007CFFFFFFFF0000000000005900001AFF000000000100020002000000030100000000FA6CEC7FAEF96C7C0E07C98CF10000000200000000030000000000000000000000000013000000"],
["Zeke","150300E7D93A282DACFA06BD41DF7E3385F1C6003480845500000000000000008CFFFFFFFF0000000000005E000000FF000000000100020002000000030100000000FA6CEC7FAEF96C7C9676518EF10000000200000000030000000000000000000000000003000000"],
["Sonya","15050080B2CB28B24242079B0DAFB1133ECFCC0057540B2D000000000000000018FFFFFFFF000100000000FF000000FF000000000100020002000000040200000000541B0217C139488E7FF9320F510000000200000000030000000000000000000000000000000000"],
["Kliff","150100A5A73627F7B07906C51B98DC5787885C00A4BC2462000000000000000078FFFFFFFF000100000000FF000000FF0000000001000201BE000000924BEF44B8B6E92D02000000030100000000FA6CEC7FAEF96C7CDB90B68CF10000000200000000030000000000000000000000000000000000"],
["Nomah","150700CCFEAF2A72B1300839DC3BC6D5C029530046D95749000000000000000080FFFFFFFF0000000000006D000000FF000000000100020002000000040200000000FA6CEC7FAEF96C7C662B338EF10000000200000000030000000000000000000000000005000000"],
["Jesse","150600FC06A328982742355A40290862B10470001F611E1B000000000000000080FFFFFFFF0000000000006A000000FF000000000100020002000000040200000000FA6CEC7FAEF96C7CD858248DF1000000020000000003000000000000000000000000000A000000"],
["Clive","1506003B907DB3F728EC4E4AC058885C6D1EBF00FAACE32C00000000000000007EFFFFFFFF00000000000057000052FF000000000102B389A2933B51E6F6008C10BB8F22FAF4F600020116000000CDB157CEA7CC106C02000000030100000000FA6CEC7FAEF96C7CB830C88CF10000000200000000030000000000000000000000000013000000"],
["Delthea","1503006974020975121F449B0DAFB1133ECFCC00E542292100000000000000007AFFFFFFFF0000000000005C000000FF0000000001000201920000006401BD3C4E1A54AC02000000030100000000FA6CEC7FAEF96C7C973C318EF10000000200000000030000000000000000000000000008000000"],
["Forsyth","1504005772CA7B271370330FFE1B4AA175776F0077202A64000000000000000080FFFFFFFF0000000100005800003BFF000000000100020002000000030100000000FA6CEC7FAEF96C7C8A52C88CF10000000200000000030000000000000000000000000013000000"],
["Lukas","15020007EF94FDE3950E050FFE1B4AA175776F00E85B7E1300000000000000007AFFFFFFFF000100000000FF000000FF000000000100020002000000030100000000FA6CEC7FAEF96C7CAE63B68CF10000000200000000030000000000000000000000000000000000"],
["Saber","150100238581ED8B73B3D15A40290862B1047000C0E83817000000000000000016FFFFFFFF00000000000053000000FF000000000100020002000000040200000000FA6CEC7FAEF96C7C26C8098DF10000000200000000030000000000000000000000000007000000"],
["Mycen","150700E5AE9CDB35BB440FBD41DF7E3385F1C60040B98056000000000000000090FFFFFFFF000100000000FF000000FF000000000100020002000000030100000000FA6CEC7FAEF96C7C4613588EF10000000200000000030000000000000000000000000000000000"],
["Mathilda","15010007B0D5DE8F5CDA1047A500998789CB0C003234342000000000000000007EFFFFFFFF0000000000005B000000FF000000000100020002000000030100000000FA6CEC7FAEF96C7C7F84378DF1000000020000000003000000000000000000000000000D000000"],
["Atlas","150A00C924DD07511647ABC51B98DC5787885C0051499251000000000000000082FFFFFFFF0000000000006700002CFF000000000100020002000000040200000000FA6CEC7FAEF96C7CCABF1F8DF1000000020000000003000000000000000000000000000C000000"],
["Deen","150500845D1F1EE06B864E66F4C9C39A01F65100EC6B0558000000000000000084FFFFFFFF0000000000006B000000FF00000000010274A352C3EAD1B24D00BD8AA2930952E6F6000201060000002018E4D160272E7102000000040200000000FA6CEC7FAEF96C7CCA8E288DF10000000200000000030000000000000000000000000008000000"]]
global Changes
Changes = 0
import os
def reminder(Target,form):
    List= [[10,"A"],[11,"B"],[12,"C"],[13,"D"],[14,"E"],[15,"F"]]  
    if form == "number":
        for element in List:
            if Target == element[0]:
                return element[1]
        return Target
    if form == "hex":
        for element in List:
            if Target == element[1]:
                return element[0]
        return Target
    return("Error")
def converthex(Target):
    rem = ""
    while Target != 0:
        Target = int(Target) / 16
        rem += str(reminder(int((Target - int(Target))*16),"number"))
        Target = int(Target)      
    rem = list(rem)
    rem = rem[::-1]
    endresult = ""
    for i in rem:
        endresult += i  
    if len(list(endresult)) % 2 == 1:
        endresult = "0"+endresult  
    return endresult
def convertdec(Target):
    Target = list(str(Target))
    temp = []
    for i in Target:
        i = reminder(i, "hex")
        temp.append(i)
    Target = temp
    Target = Target[::-1]
    result = []
    for j in range(len(Target)):
        tempresult = Target[j]
        tempresult = int(pow(16,j)) * int(Target[j])
        result.append(tempresult)
    finalresult = 0
    for k in result:
        finalresult += k
    return finalresult
import codecs
def hexdump(filename):
    with open(filename, 'rb') as f:
        total = ""
        for chunk in iter(lambda: f.read(32), b''):
            total += str(codecs.encode(chunk, 'hex'))
        with open("hex1_"+str(filename), "w+") as file:
           file.write(total)
import subprocess
def unhexing(filename):
    filename2 = filename.split("_")[1]
    command = "sfk189 filter "+str(filename)+" +hextobin "+str(filename2)+"_out -verbose"
    subprocess.call(command, shell=False)
#    os.remove(str(filename))
#def hexdump(filename):
#    command = "sfk189 hexdump -pure -nofile "+str(filename)+" +filter -join  >hex1_"+str(filename)
#    print(command)
    subprocess.call(command, shell=False)    
def AddCharacter(CharacterID):
    for c in Characters:
        if CharacterID == c[0]:
            Target = c[1]
    try:
            # INJECT CHARACTER: BEGIN. 
        with open("hex_"+str(filename), "r+") as file:
            content = file.read() # LEAK WHOLE FILE
            content = content.split("54494E55")            # TINU EXPLOIT. 
            content2 = list(content[1])
            temp = str("")
            for j in range(6):
                temp += str(content2[j])
            content2 = content[1].split(temp) # content2[0] = []
                                              # content2[1] = [AlmStart -> End]
            content4 = content2[1].split("000000020000000003")
            content3 = content4[1]
            content3 = list(content3) # PREPARE EVERYTHING POST ALM'S
                                      # SECOND HALF TO FIND FULL ALM.
            temp2 = str("")
            for k in range(34):
                temp2 += str(content3[k]) # GET ALM'S LAST BLOCK 
            Alm = str(content4[0]) + "000000020000000003" + str(temp2) # RE-MERGE ALM
            tempcontent = content[1].split(temp)
            content[1] = tempcontent[1]
            content5 = content[1].split(str(Alm))
            content5 = content5[1]
            global result
            result = str(content[0]) + "54494E55" + str(temp) + str(Alm) + str(Target) + str(content5)
            return result
            # INJECT CHARACTER: END.
    except NameError:
        print("Incorrect Name") 
def Save():
    # CHANGE TINU: BEGIN
    global result
    content = result
    content = content.split("54494E55") # TINU EXPLOIT. 
    content2 = list(content[1])
    temp = str("")
    for j in range(4):
        temp += str(content2[j])  
    temp = "54494E55" + temp
    content[1] = "54494E55" + content[1]
    content2 = content[1].split(temp)
    block = ""
    for k in range(2):
        block += str(content2[k])    
    block = block.split("15")
    block = block[0]
    content3 = list(content2[1])
    del content3[1]
    del content3[0]
    content4 = ""
    for l in content3:
        content4 += str(l)
    block = converthex(int(convertdec(block))+Changes)
    result = str(content[0]) + str(temp) + str(block) + str(content4)
    # CHANGE TINU: END
    
    # FIND NART, IFER AND ILER: BEGIN
    exploits = [["NART","4E415254"],["IFER","49464552"],["ILER","494C4552"]]
    loot = []
    for exploit in exploits:
        BS = converthex(int(len(result.split(exploit[1])[0])/2))
        BS = list(BS)
        Value1 = BS[0]
        Value2 = BS[1]
        del BS[1]
        del BS[0]
        BS.append(Value1)
        BS.append(Value2)
        temp = ""
        for value in BS:
            temp += str(value)
        BS = temp
        loot.append([exploit[0],BS])
    # FIND NART, IFER AND ILER: END
    
    # CHANGE NART, IFER AND ILER: BEGIN    
    EDNID = "45444E4944"    
    for i in range(len(loot)):
        content2 = result.split(EDNID)[1]
        content3 = list(content2)        
        maxvalue = 22        
        coord = maxvalue + i * 8
        loot[i].append(coord)    
        looted = loot[i] 
        block = []
        splitted = ""
        maxvalue = looted[2]
        for i in range(maxvalue+4):
            block.append(str(content3[i]))
            splitted += str(content3[i])
        maxvalue -= 4
        for j in range(4):
            block[maxvalue+j+4] = list(looted[1])[j]
        finalblock = ""
        for k in range(len(block)):
            finalblock += str(block[int(k)])        
        final = result.split(EDNID)[0] + EDNID + finalblock + result.split(splitted)[1]    
        result = final    
    with open("hex2_"+str(filename), "w+") as file:
        file.write(result)
    unhexing("hex2_"+str(filename))
    os.remove("hex2_"+str(filename))
    os.remove("hex_"+str(filename))
    # CHANGE NART, IFER AND ILER: END
filename = input("Input the exact name of the savefile ( Respect case ): ")
hexdump(filename)



with open("hex1_"+str(filename), "r+") as f:
    garbage = f.read().split("'")
    actualcontent = ""
    for element in garbage:
        if not element == "b":
            actualcontent += str(element).upper()
    with open("hex_"+str(filename), "w+") as lit:
        lit.write(actualcontent)





os.remove("hex1_"+str(filename))
Trigger = True
while Trigger == True:
    commandinput = input("Command: ")
    if commandinput == "Save":
        Save()
    elif commandinput == "Exit":
        Trigger = False
    elif commandinput.split(" ")[0] == "Add":
        commandinput = commandinput.split(" ")
        Changes += 1
        AddCharacter(commandinput[1])
    else:
        print("Wrong command.")